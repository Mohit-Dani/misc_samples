/**
 * Autogenerated by Avro DO NOT EDIT DIRECTLY
 */
package com.tomtom.places.unicorn.domain.avro.tracer;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PlaceTrace extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {

    public static final org.apache.avro.Schema SCHEMA$ =
        new org.apache.avro.Schema.Parser()
            .parse("{\"type\":\"record\",\"name\":\"PlaceTrace\",\"namespace\":\"com.tomtom.places.unicorn.domain.avro.tracer\",\"fields\":[{\"name\":\"mappedPlace\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"NormalizedPlace\",\"namespace\":\"com.tomtom.places.unicorn.domain.avro.normalized\",\"fields\":[]}],\"default\":null},{\"name\":\"clusteredPlace\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ClusteredPlace\",\"namespace\":\"com.tomtom.places.unicorn.domain.avro.clustered\",\"fields\":[]}],\"default\":null},{\"name\":\"archivePlace\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ArchivePlace\",\"namespace\":\"com.tomtom.places.unicorn.domain.avro.archive\",\"fields\":[]}],\"default\":null},{\"name\":\"traces\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Trace\",\"namespace\":\"com.tomtom.places.unicorn.domain.avro.trace\",\"fields\":[]}}],\"default\":null}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private com.tomtom.places.unicorn.domain.avro.normalized.NormalizedPlace mappedPlace;
    private com.tomtom.places.unicorn.domain.avro.clustered.ClusteredPlace clusteredPlace;
    private com.tomtom.places.unicorn.domain.avro.archive.ArchivePlace archivePlace;
    private java.util.List<com.tomtom.places.unicorn.domain.avro.trace.Trace> traces;

    /**
     * Default constructor. Note that this does not initialize fields to their default values from the schema. If that is desired then one
     * should use <code>newBuilder()</code>.
     */
    public PlaceTrace() {
    }

    /**
     * All-args constructor.
     */
    public PlaceTrace(com.tomtom.places.unicorn.domain.avro.normalized.NormalizedPlace mappedPlace,
        com.tomtom.places.unicorn.domain.avro.clustered.ClusteredPlace clusteredPlace,
        com.tomtom.places.unicorn.domain.avro.archive.ArchivePlace archivePlace,
        java.util.List<com.tomtom.places.unicorn.domain.avro.trace.Trace> traces) {
        this.mappedPlace = mappedPlace;
        this.clusteredPlace = clusteredPlace;
        this.archivePlace = archivePlace;
        this.traces = traces;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return mappedPlace;
            case 1:
                return clusteredPlace;
            case 2:
                return archivePlace;
            case 3:
                return traces;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                mappedPlace = (com.tomtom.places.unicorn.domain.avro.normalized.NormalizedPlace)value$;
                break;
            case 1:
                clusteredPlace = (com.tomtom.places.unicorn.domain.avro.clustered.ClusteredPlace)value$;
                break;
            case 2:
                archivePlace = (com.tomtom.places.unicorn.domain.avro.archive.ArchivePlace)value$;
                break;
            case 3:
                traces = (java.util.List<com.tomtom.places.unicorn.domain.avro.trace.Trace>)value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'mappedPlace' field.
     */
    public com.tomtom.places.unicorn.domain.avro.normalized.NormalizedPlace getMappedPlace() {
        return mappedPlace;
    }

    /**
     * Sets the value of the 'mappedPlace' field.
     * 
     * @param value the value to set.
     */
    public void setMappedPlace(com.tomtom.places.unicorn.domain.avro.normalized.NormalizedPlace value) {
        mappedPlace = value;
    }

    /**
     * Gets the value of the 'clusteredPlace' field.
     */
    public com.tomtom.places.unicorn.domain.avro.clustered.ClusteredPlace getClusteredPlace() {
        return clusteredPlace;
    }

    /**
     * Sets the value of the 'clusteredPlace' field.
     * 
     * @param value the value to set.
     */
    public void setClusteredPlace(com.tomtom.places.unicorn.domain.avro.clustered.ClusteredPlace value) {
        clusteredPlace = value;
    }

    /**
     * Gets the value of the 'archivePlace' field.
     */
    public com.tomtom.places.unicorn.domain.avro.archive.ArchivePlace getArchivePlace() {
        return archivePlace;
    }

    /**
     * Sets the value of the 'archivePlace' field.
     * 
     * @param value the value to set.
     */
    public void setArchivePlace(com.tomtom.places.unicorn.domain.avro.archive.ArchivePlace value) {
        archivePlace = value;
    }

    /**
     * Gets the value of the 'traces' field.
     */
    public java.util.List<com.tomtom.places.unicorn.domain.avro.trace.Trace> getTraces() {
        return traces;
    }

    /**
     * Sets the value of the 'traces' field.
     * 
     * @param value the value to set.
     */
    public void setTraces(java.util.List<com.tomtom.places.unicorn.domain.avro.trace.Trace> value) {
        traces = value;
    }

    /** Creates a new PlaceTrace RecordBuilder */
    public static com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder newBuilder() {
        return new com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder();
    }

    /** Creates a new PlaceTrace RecordBuilder by copying an existing Builder */
    public static com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder newBuilder(
        com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder other) {
        return new com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder(other);
    }

    /** Creates a new PlaceTrace RecordBuilder by copying an existing PlaceTrace instance */
    public static com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder newBuilder(
        com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace other) {
        return new com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder(other);
    }

    /**
     * RecordBuilder for PlaceTrace instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlaceTrace>
        implements org.apache.avro.data.RecordBuilder<PlaceTrace> {

        private com.tomtom.places.unicorn.domain.avro.normalized.NormalizedPlace mappedPlace;
        private com.tomtom.places.unicorn.domain.avro.clustered.ClusteredPlace clusteredPlace;
        private com.tomtom.places.unicorn.domain.avro.archive.ArchivePlace archivePlace;
        private java.util.List<com.tomtom.places.unicorn.domain.avro.trace.Trace> traces;

        /** Creates a new Builder */
        private Builder() {
            super(com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.mappedPlace)) {
                mappedPlace = data().deepCopy(fields()[0].schema(), other.mappedPlace);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.clusteredPlace)) {
                clusteredPlace = data().deepCopy(fields()[1].schema(), other.clusteredPlace);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.archivePlace)) {
                archivePlace = data().deepCopy(fields()[2].schema(), other.archivePlace);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.traces)) {
                traces = data().deepCopy(fields()[3].schema(), other.traces);
                fieldSetFlags()[3] = true;
            }
        }

        /** Creates a Builder by copying an existing PlaceTrace instance */
        private Builder(com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace other) {
            super(com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.SCHEMA$);
            if (isValidValue(fields()[0], other.mappedPlace)) {
                mappedPlace = data().deepCopy(fields()[0].schema(), other.mappedPlace);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.clusteredPlace)) {
                clusteredPlace = data().deepCopy(fields()[1].schema(), other.clusteredPlace);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.archivePlace)) {
                archivePlace = data().deepCopy(fields()[2].schema(), other.archivePlace);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.traces)) {
                traces = data().deepCopy(fields()[3].schema(), other.traces);
                fieldSetFlags()[3] = true;
            }
        }

        /** Gets the value of the 'mappedPlace' field */
        public com.tomtom.places.unicorn.domain.avro.normalized.NormalizedPlace getMappedPlace() {
            return mappedPlace;
        }

        /** Sets the value of the 'mappedPlace' field */
        public com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder setMappedPlace(
            com.tomtom.places.unicorn.domain.avro.normalized.NormalizedPlace value) {
            validate(fields()[0], value);
            mappedPlace = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'mappedPlace' field has been set */
        public boolean hasMappedPlace() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'mappedPlace' field */
        public com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder clearMappedPlace() {
            mappedPlace = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'clusteredPlace' field */
        public com.tomtom.places.unicorn.domain.avro.clustered.ClusteredPlace getClusteredPlace() {
            return clusteredPlace;
        }

        /** Sets the value of the 'clusteredPlace' field */
        public com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder setClusteredPlace(
            com.tomtom.places.unicorn.domain.avro.clustered.ClusteredPlace value) {
            validate(fields()[1], value);
            clusteredPlace = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'clusteredPlace' field has been set */
        public boolean hasClusteredPlace() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'clusteredPlace' field */
        public com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder clearClusteredPlace() {
            clusteredPlace = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'archivePlace' field */
        public com.tomtom.places.unicorn.domain.avro.archive.ArchivePlace getArchivePlace() {
            return archivePlace;
        }

        /** Sets the value of the 'archivePlace' field */
        public com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder setArchivePlace(
            com.tomtom.places.unicorn.domain.avro.archive.ArchivePlace value) {
            validate(fields()[2], value);
            archivePlace = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'archivePlace' field has been set */
        public boolean hasArchivePlace() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'archivePlace' field */
        public com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder clearArchivePlace() {
            archivePlace = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'traces' field */
        public java.util.List<com.tomtom.places.unicorn.domain.avro.trace.Trace> getTraces() {
            return traces;
        }

        /** Sets the value of the 'traces' field */
        public com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder setTraces(
            java.util.List<com.tomtom.places.unicorn.domain.avro.trace.Trace> value) {
            validate(fields()[3], value);
            traces = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'traces' field has been set */
        public boolean hasTraces() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'traces' field */
        public com.tomtom.places.unicorn.domain.avro.tracer.PlaceTrace.Builder clearTraces() {
            traces = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        public PlaceTrace build() {
            try {
                PlaceTrace record = new PlaceTrace();
                record.mappedPlace =
                    fieldSetFlags()[0] ? mappedPlace
                        : (com.tomtom.places.unicorn.domain.avro.normalized.NormalizedPlace)defaultValue(fields()[0]);
                record.clusteredPlace =
                    fieldSetFlags()[1] ? clusteredPlace
                        : (com.tomtom.places.unicorn.domain.avro.clustered.ClusteredPlace)defaultValue(fields()[1]);
                record.archivePlace =
                    fieldSetFlags()[2] ? archivePlace
                        : (com.tomtom.places.unicorn.domain.avro.archive.ArchivePlace)defaultValue(fields()[2]);
                record.traces =
                    fieldSetFlags()[3] ? traces
                        : (java.util.List<com.tomtom.places.unicorn.domain.avro.trace.Trace>)defaultValue(fields()[3]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
